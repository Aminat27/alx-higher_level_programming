============================================
How to use 7-base_geometry.py
============================================

This library is very simple, since it only has one function called
 ''integer_validator()''.

Numbers:
========
''integer_validator()'' returns True if a num is integer.
:: with positives integers
   >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
   >>> bg = BaseGeometry()

:: with positive integer
   >>> bg.integer_validator("my_int", 12)

:: with negative integer
   >>> bg.integer_validator("number", -12)
   Traceback (most recent call last):
   ValueError: number must be greater than 0

:: with infinite integer
   >>> bg.integer_validator("infnumber", int('inf'))
   Traceback (most recent call last):
   ValueError: invalid literal for int() with base 10: 'inf'

:: Trying to pass a non-integer argument
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", "5")
    Traceback (most recent call last):
    TypeError: name must be an integer

:: Trying to print the area
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

:: Passing None to method
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    TypeError: age must be an integer

:: Passing dict to method
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    TypeError: age must be an integer

::  Passing list to method
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", [3])
    Traceback (most recent call last):
    TypeError: age must be an integer

:: Passing tuple to method
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
    TypeError: age must be an integer
